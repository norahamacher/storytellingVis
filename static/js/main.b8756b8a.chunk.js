(this["webpackJsonpstorytelling-vis"]=this["webpackJsonpstorytelling-vis"]||[]).push([[0],[,,,,,,,function(e,t,n){e.exports=n(16)},,,,,function(e,t,n){},function(e,t,n){},function(e,t,n){e.exports=n.p+"static/media/storytellingvis.efb2d304.png"},function(e,t,n){e.exports=n.p+"static/media/vispyramid.54cae726.png"},function(e,t,n){"use strict";n.r(t);var a=n(0),o=n.n(a),i=n(2),r=n.n(i),s=(n(12),n(3)),c=n(4),h=n(5),l=n(6),d=(n(13),n(14),n(15),function(e){Object(l.a)(n,e);var t=Object(h.a)(n);function n(){var e;Object(s.a)(this,n);for(var a=arguments.length,o=new Array(a),i=0;i<a;i++)o[i]=arguments[i];return(e=t.call.apply(t,[this].concat(o))).m_contentArray=[],e}return Object(c.a)(n,[{key:"componentWillMount",value:function(){this.m_contentArray.push({stepId:"Introduction",description:[{type:"p",content:"In this exercise you will learn how to create a simple visualisation using ChartJS. The data is taken from Google Trends, and shows the interest over time in the term [Bushfire] in Australia."},{type:"p",content:"There will be a few codepens for you to edit in each step of this exercise. We will only be using the JS and the HTML panel, and it helps to minimise the center CSS panel for clarity. If you can not complete an exercise, the codepen for the next exercise contains all the needed code."},{type:"p",content:"A lot of times, I will provide a link to the ChartJS documentation where you find the information to complete a certain subtask. The key to do effective web developing (and other programming, for that matter), is learn how to use external libraries, read APIs and documentation, so rather than telling you in detail how to complete a step, I point you to where you find the information to do it. :-)"}]}),this.m_contentArray.push({stepId:"Step 1",description:[{type:"p",content:"As a first step, We prepare a webpage to create a chart with ChartJS. In the codepen below, add the following: "},{type:"ul",content:["HTML: A canvas element in the <body> tag, with a unique ID, for example 'chartCanvas'. This id will be referenced in the JS file, so chartJS knows where to render the chart. It needs a height and width defined to display properly. Syntax: <canvas id='' height='650' width='1850'></canvas>","JS: At the bottom you see a function starting with d3, which needs to know from where to load the data, and what to do with it. Tell it the  URL to the csv data: https://tinyurl.com/inputCSV as a string paramter.","JS: After the data is read, the function wants to call another function called 'makeChart'. This function does not exist yet. Implement an empty function named makeChart with one parameter called 'data' which will contain your data.","use [console.log(data)] inside the new function to look at the data in the console. On Codepen itself, you can check the console panel. If you're in a browser using this site, open the browser's console (if you don't know how: https://tinyurl.com/DSVisconsoles) "]}],codepenLink:"https://codepen.io/norahamacher/pen/mdVYQpz"}),this.m_contentArray.push({stepId:"Step 2",description:[{type:"p",content:"Have a look at the data in the console. What are the names of the two fields in each generated object? At the tennis example, they were Name, Weeks and Gender."},{type:"ul",content:["Use the Javascript map function to save the content of the two fields in two respective arrays. For the tennis player names, we did: var names = data.map(function(d) {return d.Name});","Use console.log(your_array_name) to print the contents of the new arrays.","Create a chartJS chart function. Check https://www.chartjs.org/docs/latest/getting-started/ to see the syntax. The first parameter of the new Chart() call must be your canvas element id.","Use one of your generated arrays as labels, and one as data. Think about which makes sense. Also think about which TYPE of chart makes sense. Try out different ones: https://www.chartjs.org/docs/latest/charts/"]}],codepenLink:"https://codepen.io/norahamacher/pen/KKVEXPJ"}),this.m_contentArray.push({stepId:"Step 3",description:[{type:"p",content:"At this point, you should have a chart generated. Arguably, a line chart is best for this type of data as it shows data over time which can be put in direct relation to each other. But at the moment, we do not have any axes labels, and there is a useless legend, which we want to get rid of. At this point, the many options of chartJS come into play and it is really up to what is being visualised, what needs to be done."},{type:"ul",content:["Add a label for both the x and the y axis. Check https://www.chartjs.org/docs/latest/axes/labelling.html documentation to learn how to do this.","We do not need a legend for this type of chart, as we only have one dataset and the axes are self explanatory. Check https://www.chartjs.org/docs/latest/configuration/legend.html to see how to use the legend option's 'display' attribute to hide the legend."]}],codepenLink:"https://codepen.io/norahamacher/pen/pogmQaj"})}},{key:"render",value:function(){return o.a.createElement("div",{className:"App"},this.m_contentArray.map((function(e,t){return o.a.createElement(p,{key:t,stepId:e.stepId,description:e.description,codepenLink:e.codepenLink})})))}}]),n}(a.Component)),p=function(e){var t=e.stepId,n=e.description,a=e.codepenLink;return o.a.createElement("section",{className:"tutorialSection"},o.a.createElement("h1",null," ",t),n.map((function(e,t){return o.a.createElement("div",{className:"description",key:t},"p"===e.type?o.a.createElement("p",null,e.content):o.a.createElement("ul",null,e.content.map((function(e,t){return o.a.createElement("li",{key:t},e)}))))})),a?o.a.createElement("div",null,o.a.createElement("p",null," https://codepen.io/norahamacher/pen/mdVYQpz ")," ",o.a.createElement("iframe",{className:"iFrame",src:a,title:"Exercise Step 1"})," "):"")},u=d;r.a.render(o.a.createElement(o.a.StrictMode,null,o.a.createElement(u,null)),document.getElementById("root"))}],[[7,1,2]]]);
//# sourceMappingURL=main.b8756b8a.chunk.js.map